So there is a groupList component which renders the titles and description of all the groups in the database. Every group has its posts by users, which is rendered as a list when clicked on a group name.

The problem I am facing is that even though all groups are being shown but, when I click on the group name to see all the posts in the group, i.e. using the same code to get the group, It only renders the last post in the response array.

The response array from the server hitting a psql databse is correct.
I think there is a flaw in my logic. Please help me understand this.

Filename: server.js

CODE:

```const express = require('express');
const bodyParser = require('body-parser');
const Pool = require('pg').Pool;
var http = require('http');
var formidable = require('formidable');
var fs = require('fs');

const app = express();
const port = 8082;

var hosts = ['http://localhost:3000'].join(', ');

const pool = new Pool({
    user: 'your password',
    host: 'localhost',
    database: 'dbName',
    password: 'yourpassword',
    port: 5432,
});
pool.connect(function(err){
  if(!err) {
      console.log("Database is connected");
  } else {
      console.log("Error connecting database");
  }
  });

  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true}));

app.use(function(request, response, next) {
response.header("Access-Control-Allow-Origin", "*");
response.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.get('/groups', getGroups);
app.get('/posts', getPosts);
app.post('/student', createStudent);
app.post('/login', studentLogin);
app.get('/comments', getComments);
app.post('/posts' , createPost);


function createPost(request,response) {
  console.log("inside createPost");
  console.log(request.body);
  var post = request.body.post,
   group_id = request.body.group_id,
   user_id = request.body.user_id,
   title = request.body.title;

    pool.connect((err, db, done) => {
      if(err) {
        return response.status(400).send(err);
      }
      else {
        db.query('INSERT INTO posts (group_id, user_id, post, title) VALUES ($1, $2, $3, $4)', [group_id, user_id, post, title], (err, results, fields) => {
          done();
          if(err) {
            return response.status(400).send(err);
          }
            else {
              console.log(JSON.stringify(results.rows));
               response.status(201).send({message: 'Post Succesfull', data: JSON.stringify(results.rows)});
          }
        })
      }
    })
  }


// Query to get the GroupList

function getGroups (request, response) {
    console.log("inside getgroups");
    const groupName = request.query.groupName;
 var query = "";

if (groupName != null) {
  query = `SELECT * FROM groups where group_name=${groupName} ORDER BY group_id ASC`;
} else {
  query = `SELECT * FROM groups ORDER BY group_id ASC`;
}
    pool.query(query, function(error, results) {
        if(error) {
            throw error;
        }
        response.status(200).json(results.rows)
    })
}

//Query to get the PostsList
function getPosts (request, response) {
    console.log("inside getPosts");
    const groupId = request.query.groupId;
    console.log(groupId);
    var query =`SELECT * FROM posts join groups on posts.group_id = groups.group_id where posts.group_id=${groupId}`;
    pool.query(query, function(error, results) {
        if(error) {
            throw error;
        }
        response.status(200).json(results.rows)
    })
}

function getComments (request, response) {
    console.log("inside getComments");
    const postId = request.query.postId;
    console.log(postId);
    var query =`SELECT * FROM comments join posts on comments.post_id = posts.post_id where comments.post_id=${postId}`;
    pool.query(query, function(error, results) {
        if(error) {
            throw error;
        }
        response.status(200).json(results.rows);
    })
}

function createStudent(request, response){
  console.log("inside createStudent()");
  var email = request.body.email,
          password = request.body.password,
          fname = request.body.fname,
          lname = request.body.lname;
  pool.connect((err, db, done) => {
    if(err) {
      return response.status(400).send(err);
    }
    else {
      db.query('INSERT INTO student (student_email, student_password, student_fname, student_lname) VALUES ($1, $2, $3, $4)', [email, password, fname, lname], (err, table) => {
        done();
        if(err) {
          return response.status(400).send(err);
        }
        else {
          response.status(201).send({message: 'REGISTRATION SUCCESSFULL' });
        }
      })
    }
  })
}

function studentLogin(request, response){
  console.log("inside StudentLogin()");
  var email = request.body.email,
      password = request.body.password;

  pool.connect((err, db, done) => {
    if(err) {
      return response.status(400).send(err);
    }
    else {
      db.query('SELECT * FROM student WHERE student_email=$1 and student_password=$2', [email, password], (err, results, fields) => {
        done();
        if(err) {
          return response.status(400).send(err);
        }
          else {
            console.log(JSON.stringify(results.rows));
             response.status(201).send({message: 'Login SUCCESSFULL', data: JSON.stringify(results.rows)});
        }
      })
    }
  })
} ```




***********************************************************************


filename: groupsReducer.js

CODE:


import _ from 'lodash';
import {
  GET_GROUPS
} from '../actions/types';


export default (state = {}, action) => {

  switch (action.type) {
    case GET_GROUPS:
       console.log("inside GET_GROUPS in groupsREducer");

       return {...state, ..._.mapKeys(action.payload, 'group_id')};
    // case CREATE_POST:
    //   return {...state, [action.payload.id]: action.payload };
    // case EDIT_POST:
    //   return {...state, [action.payload.id]: action.payload };
    // case DELETE_POST:
    //   return _.omit(state, action.payload) // doesnt change the original state object. it creates a copy like above by itself.
    default:
      return state;
  }
}

//mapKeys is a function from lowdadsh that takes an array and returns an object.


***********************************************************************


Filename: postsReducer.js

import _ from 'lodash';
import {
  CREATE_POST,
  FETCH_POSTS,
  FETCH_POST,
  DELETE_POST,
  EDIT_POST,
} from '../actions/types';


export default (state = {}, action) => {
  switch (action.type) {
    case FETCH_POSTS:
       console.log("inside postsReducer FETCH_POSTS");
       return {...state, ..._.mapKeys(action.payload, 'id')};
    // case FETCH_POST:
    //   console.log(action.payload);
    //   return {...state, [action.payload.id]: action.payload };
    // case CREATE_POST:
    //   return {...state, [action.payload.id]: action.payload };
    // case EDIT_POST:
    //   return {...state, [action.payload.id]: action.payload };
    // case DELETE_POST:
    //   return _.omit(state, action.payload) // doesnt change the original state object. it creates a copy like above by itself.
    default:
      return state;
  }
}

//mapKeys is a function from lowdash that takes an array and returns an object.


***********************************************************************


Filename: actions/index.js

import history from '../history';
import { url } from "../components/utils/RestUtils";
import axios from "axios";
import qs from 'qs';



import {
  SIGN_IN, SIGN_OUT,
  CREATE_POST,
  GET_GROUPS,
  FETCH_POSTS,
  // DELETE_POST,
  // EDIT_POST,
} from './types';

export const signIn = (userId) => {
  return {
    type: SIGN_IN,
    payload: userId
  };
};
export const signOut = () => {
  return {
    type: SIGN_OUT
  };
};

export const createPost = formValues => async (dispatch, getState) => {

    const createPost_Data = qs.stringify({
    group_id: 1,
    post: formValues.description,
    user_id: 23,
    title: formValues.title
  });

  axios.post(url + "posts", createPost_Data)
   .then(response => {
    console.log('Post created at actions.');
    console.log(response.data);
    })
}

export const getGroups = () => async dispatch => {
  console.log("inside getGroups in actions");
  axios.get(url + "groups")
  .then(response => {
    console.log(response.data);

    dispatch({
      type: GET_GROUPS,
      payload: response.data
    })
    },
      function(error) {
        console.log(error)
              }
          );
};

export const fetchPosts = (id) => async dispatch => {
  console.log("inside fetchPosts in actions");
  axios.get(url + "posts", {params: {
    groupId: id }
  })
  .then(response => {
    console.log(response.data);
    dispatch({
      type: FETCH_POSTS,
      payload: response.data
    })
  }, function(error) {
    console.log(error);
  });
}


***********************************************************************


Filename: components/PostsList.js

import React from "react";
import PostItem from "./PostItem";
import PostCreate from './PostCreate';
import { connect } from "react-redux";
import {fetchPosts} from '../../actions';
import {Link} from 'react-router-dom';


class PostsList extends React.Component {

  componentDidMount() {
    this.props.fetchPosts(this.props.match.params.id);
  }

    renderList() {
      console.log(this.props.posts);
     return this.props.posts.map(post => {
       return (
         <div className="item" key={post.post_id} >

           <i className="large middle aligned icon camera" />
           <div className="content">
             <div>

               <Link to={`/posts/${post.post_id}`} className="header">

                 {post.title}
               </Link>
             </div>
             <div className="description">{post.post}</div>
           </div>
         </div>
           );
           });
   }

    render() {
    return (
   <div>
     <div className="ui container">

       <div className="ui celled list">{this.renderList()}</div>

     </div>
   </div>
            );
         }
  }

  const mapStateToProps = state => {
    return {
      posts: Object.values(state.posts)
    };
  };


export default connect(mapStateToProps, { fetchPosts })(PostsList);


***********************************************************************


Filename: Components/GroupList.js


import React from "react";
import GroupItem from "./GroupItem";
import { connect } from "react-redux";
import { getGroups } from '../../actions';
import {Link} from 'react-router-dom';

class GroupList extends React.Component {

  componentDidMount() {
    this.props.getGroups();
  }


  renderList() {
   return this.props.groups.map(group => {
     return (
       <div className="item" key={group.group_id} >

         <i className="large middle aligned icon camera" />
         <div className="content">
           <div>

             <Link to={`/posts/${group.group_id}`} className="header">

               {group.group_name}
             </Link>
           </div>
           <div className="description">{group.group_description}</div>
         </div>
       </div>
         );
         });
 }

  render() {
  return (
 <div>
   <div className="ui container">

       <div className="ui celled list">{this.renderList()}</div>

   </div>
 </div>
          );
       }

}

const mapStateToProps = state => {
  return {
    groups: Object.values(state.groups)
  };
};

export default connect(mapStateToProps, { getGroups })(GroupList);


***********************************************************************










Response array back from server:

```0: {group_id: 1, group_moderator: 22, group_name: "cats", group_description: "all about cats"}
1: {group_id: 2, group_moderator: 23, group_name: "dogs", group_description: "All about dogs"}
2: {group_id: 3, group_moderator: 23, group_name: "birds", group_description: "All about Birds"}
length: 3
__proto__: Array(0)```


//console.log("inside actions.js); gives the below response

0: {post_id: 1, group_id: 1, post: "cats are awesome", title: "how i feel about cats", user_id: null, …}
1: {post_id: 2, group_id: 1, post: "I think that cats might be capable of flying in the fiture", title: "Cats might fly", user_id: 23, …}
2: {post_id: 3, group_id: 1, post: "`kjnvaksdfjaskdfj", title: "post number 3", user_id: 23, …}
3: {post_id: 4, group_id: 1, post: "new post trial", title: "this a new post", user_id: 23, …}
4: {post_id: 5, group_id: 1, post: "skdfasklfj Trieal", title: "Trail2", user_id: 23, …}
length: 5
__proto__: Array(0)

//And Finally, console.log("from inside PostLisT" + this.props.post) gives only the last data in the array as an result.


The problem is that only the last post from the array is being rendered on the screen.
